generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PostState {
  new
  very_good
  good
  satisfactory
}

model User {
  id            String          @id @default(cuid())
  name          String?          
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole        @default(USER)
  Account       Account?
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}


model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id         String @id @default(cuid())

  userId     String  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id         String @id @default(cuid())
  name       String @unique
  icon       String?
  altIcon    String?

  posts      Post[] @relation("PostCategories")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribut  {
  id         String @id @default(cuid())
  name       String @unique

  posts      Post[] @relation("PostTag")
  
}

model Post {
  id          String @id @default(cuid())
  icode       String @unique
  title       String
  price       Float
  description String?
  image       String?
  imageAlt    String?

  state       PostState

  categories  Category[] @relation("PostCategories")
  attributs   Attribut[] @relation("PostTag")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
