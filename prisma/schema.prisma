generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PostState {
  new
  very_good
  good
  satisfactory
}

model User {
  id                   String           @id @default(cuid())
  name                 String?           
  username             String?          @unique
  email                String?          @unique
  emailVerified        DateTime? 
  password             String? 
  image                String? 
  gender               String? 
  postalCode           String? 
  phoneNumber          String? 
  role                 UserRole         @default(USER)
       
  Account              Account? 
  favorite             Favorite?        @relation("UserFavorites")
  lot                  Lot[]            @relation("UserLots")
  messages             Message[]        @relation("UserMessages")
  contentMessage       ContentMessage[] @relation("UserMessageContent")

  
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id                       String  @id @default(cuid()) 
  
  userId                   String
  user                     User    @relation(fields: [userId], references: [id], name: "UserMessages")
  
  content                  ContentMessage[] @relation("MessageContent")
  
  lotId                    String?          @unique
  lot                      Lot?             @relation(fields: [lotId], references: [id], name: "LotMessages")

  postId                   String?         @unique
  post                     Post?           @relation(fields: [postId], references: [id], name: "PostMessages")

  isArchived               Boolean @default(false)
  isReadByUser             Boolean @default(false)
  isReadByAdmin            Boolean @default(false)

  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Lot {
  id                       String   @id @default(cuid())
  name                     String 
  userId                   String 
  user                     User     @relation(fields: [userId], references: [id], name: "UserLots", onDelete: Cascade)
  
  message                  Message?  @relation(name: "LotMessages")
  messageId                String?   @unique

  hasPostsEcluded         Boolean  @default(false)

  posts                    Post[]   @relation("PostsLots")
}

model ContentMessage {
  id                       String  @id @default(cuid())
  content                  String

  userId                   String
  user                     User    @relation(fields: [userId], references: [id], name: "UserMessageContent", onDelete: Cascade)
  
  offerPrice               String?
  
  messageId                String
  message                  Message @relation(fields: [messageId], references: [id], name: "MessageContent" ,onDelete: Cascade)
  
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Favorite {
  id                       String  @id @default(cuid()) 
  userId                   String  @unique
  user                     User    @relation(fields: [userId], references: [id], name: "UserFavorites", onDelete: Cascade)
  posts                    Post[]  @relation("PostsFavorites")
}


model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorToken {
  id         String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id         String @id @default(cuid())

  userId     String  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
  id         String @id @default(cuid())
  name       String @unique
  icon       String?
  altIcon    String?

  posts      Post[] @relation("PostsCategories")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribut  {
  id         String @id @default(cuid())
  name       String @unique

  posts      Post[] @relation("PostsAttributs")
  
}

model Post {
  id          String @id @default(cuid())
  icode       String @unique
  title       String
  price       Float
  description String? @db.VarChar(1000)

  state       PostState

  categories  Category[]    @relation("PostsCategories")
  attributs   Attribut[]    @relation("PostsAttributs")
  favorites   Favorite[]    @relation("PostsFavorites")
  lots        Lot[]         @relation("PostsLots")
  images      Image[]       @relation("PostImages")


  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  messages    Message[]     @relation(name: "PostMessages")
}

model Image {
  id         String         @id @default(cuid())
  src        String         @unique
  alt        String

  extension  String

  postId     String
  post       Post           @relation(fields: [postId], references: [id], name: "PostImages")

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

}